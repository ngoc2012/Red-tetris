{"version":3,"file":"react-gamepads.cjs.production.min.js","sources":["../src/GamepadsContext.tsx","../src/useGamepads.tsx"],"sourcesContent":["import React, {\n  createContext,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nconst GamepadsContext = createContext({});\n\ninterface GamepadsProviderProps {\n  children: React.ReactNode;\n}\n\nconst GamepadsProvider = ({ children }: GamepadsProviderProps) => {\n  const [gamepads, setGamepads] = useState({});\n  const requestRef = useRef<number>();\n\n  var haveEvents = 'ongamepadconnected' in window;\n\n  const addGamepad = useCallback(\n    gamepad => {\n      setGamepads({\n        ...gamepads,\n        [gamepad.index]: {\n          buttons: gamepad.buttons,\n          id: gamepad.id,\n          axes: gamepad.axes,\n        },\n      });\n\n      // Handle controller input before render\n      // requestAnimationFrame(updateStatus);\n    },\n    [gamepads, setGamepads]\n  );\n\n  /**\n   * Adds game controllers during connection event listener\n   * @param {object} e\n   */\n  const connectGamepadHandler = (e: Event) => {\n    addGamepad((e as GamepadEvent).gamepad);\n  };\n\n  /**\n   * Finds all gamepads and adds them to context\n   */\n  const scanGamepads = useCallback(() => {\n    // Grab gamepads from browser API\n    var detectedGamepads = navigator.getGamepads\n      ? navigator.getGamepads()\n      : navigator.webkitGetGamepads\n      ? navigator.webkitGetGamepads()\n      : [];\n\n    // Loop through all detected controllers and add if not already in state\n    for (var i = 0; i < detectedGamepads.length; i++) {\n      if (detectedGamepads[i]) {\n        addGamepad(detectedGamepads[i]);\n      }\n    }\n  }, [addGamepad]);\n\n  // Add event listener for gamepad connecting\n  useEffect(() => {\n    window.addEventListener('gamepadconnected', connectGamepadHandler);\n\n    return window.removeEventListener(\n      'gamepadconnected',\n      connectGamepadHandler\n    );\n  });\n\n  // Update each gamepad's status on each \"tick\"\n  const animate = useCallback(() => {\n    if (!haveEvents) scanGamepads();\n    requestRef.current = requestAnimationFrame(animate);\n  }, [requestRef, scanGamepads, haveEvents]);\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current!);\n  }, [animate]);\n\n  return (\n    <GamepadsContext.Provider value={{ gamepads, setGamepads }}>\n      {children}\n    </GamepadsContext.Provider>\n  );\n};\n\nexport { GamepadsProvider, GamepadsContext };\n","import { useEffect, useRef } from 'react';\n\ninterface GamepadRef {\n  [key: number]: Gamepad;\n}\n\nexport default function useGamepads(callback: (data: GamepadRef) => void) {\n  const gamepads = useRef<GamepadRef>([]);\n  const requestRef = useRef<number>();\n\n  var haveEvents = 'ongamepadconnected' in window;\n\n  const addGamepad = (gamepad: Gamepad) => {\n    gamepads.current = {\n      ...gamepads.current,\n      [gamepad.index]: gamepad,\n    };\n\n    // Send data to external callback (like React state)\n    callback(gamepads.current);\n\n    // Handle controller input before render\n    // @TODO: Add API to hook callback into this\n    // requestAnimationFrame(updateStatus);\n  };\n\n  /**\n   * Adds game controllers during connection event listener\n   * @param {object} e\n   */\n  const connectGamepadHandler = (e: Event) => {\n    addGamepad((e as GamepadEvent).gamepad);\n  };\n\n  /**\n   * Finds all gamepads and adds them to context\n   */\n  const scanGamepads = () => {\n    // Grab gamepads from browser API\n    var detectedGamepads = navigator.getGamepads\n      ? navigator.getGamepads()\n      : navigator.webkitGetGamepads\n      ? navigator.webkitGetGamepads()\n      : [];\n\n    // Loop through all detected controllers and add if not already in state\n    for (var i = 0; i < detectedGamepads.length; i++) {\n      const newGamepads = detectedGamepads[i];\n      if (newGamepads && newGamepads !== null) addGamepad(newGamepads);\n    }\n  };\n\n  // Add event listener for gamepad connecting\n  useEffect(() => {\n    window.addEventListener('gamepadconnected', connectGamepadHandler);\n\n    return window.removeEventListener(\n      'gamepadconnected',\n      connectGamepadHandler\n    );\n  });\n\n  // Update each gamepad's status on each \"tick\"\n  const animate = () => {\n    if (!haveEvents) scanGamepads();\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current!);\n  });\n\n  return gamepads.current;\n}\n"],"names":["GamepadsContext","createContext","children","useState","gamepads","setGamepads","requestRef","useRef","haveEvents","window","addGamepad","useCallback","gamepad","index","buttons","id","axes","connectGamepadHandler","e","scanGamepads","detectedGamepads","navigator","getGamepads","webkitGetGamepads","i","length","useEffect","addEventListener","removeEventListener","animate","current","requestAnimationFrame","cancelAnimationFrame","React","Provider","value","callback","newGamepads"],"mappings":"uWAOMA,EAAkBC,gBAAc,uDAMb,gBAAGC,IAAAA,WACMC,WAAS,IAAlCC,OAAUC,OACXC,EAAaC,WAEfC,EAAa,uBAAwBC,OAEnCC,EAAaC,eACjB,SAAAC,SACEP,OACKD,UACFQ,EAAQC,OAAQ,CACfC,QAASF,EAAQE,QACjBC,GAAIH,EAAQG,GACZC,KAAMJ,EAAQI,aAOpB,CAACZ,EAAUC,IAOPY,EAAwB,SAACC,GAC7BR,EAAYQ,EAAmBN,UAM3BO,EAAeR,eAAY,mBAE3BS,EAAmBC,UAAUC,YAC7BD,UAAUC,cACVD,UAAUE,kBACVF,UAAUE,oBACV,GAGKC,EAAI,EAAGA,EAAIJ,EAAiBK,OAAQD,IACvCJ,EAAiBI,IACnBd,EAAWU,EAAiBI,MAG/B,CAACd,IAGJgB,aAAU,kBACRjB,OAAOkB,iBAAiB,mBAAoBV,GAErCR,OAAOmB,oBACZ,mBACAX,UAKEY,EAAUlB,eAAY,WACrBH,GAAYW,IACjBb,EAAWwB,QAAUC,sBAAsBF,KAC1C,CAACvB,EAAYa,EAAcX,WAE9BkB,aAAU,kBACRpB,EAAWwB,QAAUC,sBAAsBF,GACpC,kBAAMG,qBAAqB1B,EAAWwB,YAC5C,CAACD,IAGFI,gBAACjC,EAAgBkC,UAASC,MAAO,CAAE/B,SAAAA,EAAUC,YAAAA,IAC1CH,iCChF6BkC,OAC5BhC,EAAWG,SAAmB,IAC9BD,EAAaC,WAEfC,EAAa,uBAAwBC,OAEnCC,EAAa,SAACE,SAClBR,EAAS0B,aACJ1B,EAAS0B,gBACXlB,EAAQC,OAAQD,MAInBwB,EAAShC,EAAS0B,UAWdb,EAAwB,SAACC,GAC7BR,EAAYQ,EAAmBN,UAsBjCc,aAAU,kBACRjB,OAAOkB,iBAAiB,mBAAoBV,GAErCR,OAAOmB,oBACZ,mBACAX,UAKEY,EAAU,SAAVA,IACCrB,GA3Bc,mBAEfY,EAAmBC,UAAUC,YAC7BD,UAAUC,cACVD,UAAUE,kBACVF,UAAUE,oBACV,GAGKC,EAAI,EAAGA,EAAIJ,EAAiBK,OAAQD,IAAK,KAC1Ca,EAAcjB,EAAiBI,GACjCa,GAA+B,OAAhBA,GAAsB3B,EAAW2B,IAgBrClB,GACjBb,EAAWwB,QAAUC,sBAAsBF,WAG7CH,aAAU,kBACRpB,EAAWwB,QAAUC,sBAAsBF,GACpC,kBAAMG,qBAAqB1B,EAAWwB,aAGxC1B,EAAS0B"}