{"version":3,"file":"react-gamepads.cjs.development.js","sources":["../src/useGamepads.tsx","../src/GamepadsContext.tsx"],"sourcesContent":["import { useEffect, useRef } from 'react';\n\ninterface GamepadRef {\n  [key: number]: Gamepad;\n}\n\nexport default function useGamepads(callback: (data: GamepadRef) => void) {\n  const gamepads = useRef<GamepadRef>([]);\n  const requestRef = useRef<number>();\n\n  var haveEvents = 'ongamepadconnected' in window;\n\n  const addGamepad = (gamepad: Gamepad) => {\n    gamepads.current = {\n      ...gamepads.current,\n      [gamepad.index]: gamepad,\n    };\n\n    // Send data to external callback (like React state)\n    callback(gamepads.current);\n\n    // Handle controller input before render\n    // @TODO: Add API to hook callback into this\n    // requestAnimationFrame(updateStatus);\n  };\n\n  /**\n   * Adds game controllers during connection event listener\n   * @param {object} e\n   */\n  const connectGamepadHandler = (e: Event) => {\n    addGamepad((e as GamepadEvent).gamepad);\n  };\n\n  /**\n   * Finds all gamepads and adds them to context\n   */\n  const scanGamepads = () => {\n    // Grab gamepads from browser API\n    var detectedGamepads = navigator.getGamepads\n      ? navigator.getGamepads()\n      : navigator.webkitGetGamepads\n      ? navigator.webkitGetGamepads()\n      : [];\n\n    // Loop through all detected controllers and add if not already in state\n    for (var i = 0; i < detectedGamepads.length; i++) {\n      const newGamepads = detectedGamepads[i];\n      if (newGamepads && newGamepads !== null) addGamepad(newGamepads);\n    }\n  };\n\n  // Add event listener for gamepad connecting\n  useEffect(() => {\n    window.addEventListener('gamepadconnected', connectGamepadHandler);\n\n    return window.removeEventListener(\n      'gamepadconnected',\n      connectGamepadHandler\n    );\n  });\n\n  // Update each gamepad's status on each \"tick\"\n  const animate = () => {\n    if (!haveEvents) scanGamepads();\n    requestRef.current = requestAnimationFrame(animate);\n  };\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current!);\n  });\n\n  return gamepads.current;\n}\n","import React, {\n  createContext,\n  useCallback,\n  useEffect,\n  useRef,\n  useState,\n} from 'react';\nconst GamepadsContext = createContext({});\n\ninterface GamepadsProviderProps {\n  children: React.ReactNode;\n}\n\nconst GamepadsProvider = ({ children }: GamepadsProviderProps) => {\n  const [gamepads, setGamepads] = useState({});\n  const requestRef = useRef<number>();\n\n  var haveEvents = 'ongamepadconnected' in window;\n\n  const addGamepad = useCallback(\n    gamepad => {\n      setGamepads({\n        ...gamepads,\n        [gamepad.index]: {\n          buttons: gamepad.buttons,\n          id: gamepad.id,\n          axes: gamepad.axes,\n        },\n      });\n\n      // Handle controller input before render\n      // requestAnimationFrame(updateStatus);\n    },\n    [gamepads, setGamepads]\n  );\n\n  /**\n   * Adds game controllers during connection event listener\n   * @param {object} e\n   */\n  const connectGamepadHandler = (e: Event) => {\n    addGamepad((e as GamepadEvent).gamepad);\n  };\n\n  /**\n   * Finds all gamepads and adds them to context\n   */\n  const scanGamepads = useCallback(() => {\n    // Grab gamepads from browser API\n    var detectedGamepads = navigator.getGamepads\n      ? navigator.getGamepads()\n      : navigator.webkitGetGamepads\n      ? navigator.webkitGetGamepads()\n      : [];\n\n    // Loop through all detected controllers and add if not already in state\n    for (var i = 0; i < detectedGamepads.length; i++) {\n      if (detectedGamepads[i]) {\n        addGamepad(detectedGamepads[i]);\n      }\n    }\n  }, [addGamepad]);\n\n  // Add event listener for gamepad connecting\n  useEffect(() => {\n    window.addEventListener('gamepadconnected', connectGamepadHandler);\n\n    return window.removeEventListener(\n      'gamepadconnected',\n      connectGamepadHandler\n    );\n  });\n\n  // Update each gamepad's status on each \"tick\"\n  const animate = useCallback(() => {\n    if (!haveEvents) scanGamepads();\n    requestRef.current = requestAnimationFrame(animate);\n  }, [requestRef, scanGamepads, haveEvents]);\n\n  useEffect(() => {\n    requestRef.current = requestAnimationFrame(animate);\n    return () => cancelAnimationFrame(requestRef.current!);\n  }, [animate]);\n\n  return (\n    <GamepadsContext.Provider value={{ gamepads, setGamepads }}>\n      {children}\n    </GamepadsContext.Provider>\n  );\n};\n\nexport { GamepadsProvider, GamepadsContext };\n"],"names":["useGamepads","callback","gamepads","useRef","requestRef","haveEvents","window","addGamepad","gamepad","current","index","connectGamepadHandler","e","scanGamepads","detectedGamepads","navigator","getGamepads","webkitGetGamepads","i","length","newGamepads","useEffect","addEventListener","removeEventListener","animate","requestAnimationFrame","cancelAnimationFrame","GamepadsContext","createContext","GamepadsProvider","children","useState","setGamepads","useCallback","buttons","id","axes","React","Provider","value"],"mappings":"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"}